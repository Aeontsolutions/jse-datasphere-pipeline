# Airflow Core Settings
# Generate using: python -c 'from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())'
AIRFLOW_FERNET_KEY=

# Database Settings
POSTGRES_USER=airflow
POSTGRES_PASSWORD=airflow
POSTGRES_DB=airflow

# Redis Settings (optional, leave empty for no password)
REDIS_PASSWORD=

# User Settings
# These are used to set the user ID and group ID for the airflow user
# The default values are 50000:50000
AIRFLOW_UID=50000
AIRFLOW_GID=50000

# Admin User Settings
# These will be used to create the initial admin user
ADMIN_USERNAME=admin
ADMIN_PASSWORD=admin
ADMIN_FIRSTNAME=admin
ADMIN_LASTNAME=admin
ADMIN_EMAIL=admin@example.com

# Core Configuration
AIRFLOW__CORE__EXECUTOR=CeleryExecutor
AIRFLOW__CORE__LOAD_EXAMPLES=false
AIRFLOW__CORE__SECURE_MODE=true
AIRFLOW__CORE__ALLOWED_DESERIALIZATION_CLASSES=('airflow.providers.mysql.hooks.mysql.MySqlHook', 'airflow.providers.ssh.hooks.ssh.SSHHook')
AIRFLOW__CORE__TEST_CONNECTION=true
AIRFLOW__CORE__SECURITY_MANAGER_CLASS=airflow.www.security.AirflowSecurityManager

# API Configuration
AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth

# Webserver Configuration
AIRFLOW__WEBSERVER__EXPOSE_CONFIG=false
AIRFLOW__WEBSERVER__WORKERS=4
AIRFLOW__WEBSERVER__WORKER_REFRESH_INTERVAL=30
AIRFLOW__WEBSERVER__WORKER_TIMEOUT=120

# Database Connections
# Format: postgresql+psycopg2://[user]:[password]@[host]/[db]
AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@postgres/airflow

# Celery Broker URL (Redis)
# Format: redis://:[password]@[host]:[port]/[db_number]
AIRFLOW__CELERY__BROKER_URL=redis://:@redis:6379/0

# Additional Security Settings
# Note: For production, you should:
# 1. Enable HTTPS
# 2. Set a strong secret key
# 3. Use strong passwords
# 4. Consider using external authentication backends 